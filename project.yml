---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :name: OptecFocusingRotator
  :use_exceptions: FALSE
  :use_test_preprocessor: FALSE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_

:release_build:
  :output: MyApp.out
#  :use_assembly: FALSE

:environment:
  - :path:
    #- "C:/MinGW/bin"
    #- "C:/Program Files (x86)/Microchip/mplabc30/v3.31c/bin"
    #- "C:/Program Files (x86)/Microchip/mplabc30/v3.31c/bin/bin"
    - C30/v3.31/bin
    - C30/v3.31/bin/bin
:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
    - -:test/support
  :source:
    - src/**
  :include:
    - C30/v3.31/include
    #- "C:/Program Files (x86)/Microchip/mplabc30/v3.31c/include"
    #- "C:/Program Files (x86)/Microchip/mplabc30/v3.31c/support/PIC24H/h"
    - include/**
    - "vendor/ceedling/vendor/unity/src"
  :support:
    - test/support

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :commmon: &common_defines
    - INCLUDE_ROTATOR
  :test:
    #- *common_defines  
    #- TEST  
    - UNITY_INT_WIDTH=16  
    - UNITY_POINTER_WIDTH=16
    - CMOCK_MEM_SIZE=500
    - CMOCK_MEM_PTR_AS_INT="unsigned int"
    - CMOCK_MEM_INDEX_TYPE="unsigned int"
    - CMOCK_MEM_ALIGN=1
 
  :test_preprocess:
 
    - *common_defines
 
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :callback_after_arg_check: TRUE
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8

:tools:
  :test_compiler:
    :executable: pic30-gcc.exe
    :arguments:
      - -mcpu=24HJ128GP204
      - -x c
      - -c
      #- -mlarge-arrays
      - ${1}
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      #- -D"__PIC24H__"
      #- -D"__C30__"
      #- -D"__PIC24HJ128GP204__"
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
      - -o${2}
      - -g
      - -Wall
      - -mlarge-code
      - -O3
  :test_linker:
    :executable: pic30-gcc.exe
    :arguments:
      - -mcpu=24HJ128GP204
      - ${1}
      - -o"FocusingRotator.cof" 
      - -Tp24HJ128GP204.gld
      - -Wl,-L"..\src\code",-L"..\src\TCPIP_Stack",-L"..\C30\v3.31\bin",-L"..\C30\v3.31\bin\bin",-Tp24HJ128GP204.gld,--defsym=__MPLAB_BUILD=1,-Map="FocusingRotator.map",--report-mem
      #- -Wl#,-Tp24HJ128GP204.gld,--defsym=__MPLAB_BUILD=1,-Map="FocusingRotator.map",--report-mem
  :release_compiler:
    :executable: pic30-gcc.exe
    :arguments:
      - -mcpu=24HJ128GP204
      - -c
      - ${1}
      - -o${2}
      - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
      - -D"__PIC24H__"
      - -D"__C30__"
      - -D"__PIC24HJ128GP204__"
      - -D$: COLLECTION_DEFINES_TEST_AND_VENDOR
      - -g
      - -Wall
      - -mlarge-code
      - -O3
  :release_linker:
    :executable: pic30-gcc.exe
    :arguments:
      - -mcpu=24HJ128GP204
      - ${1}
      - -o"FocusingRotator.cof" 
      - -Wl,-L"..\src\code",-L"..\src\TCPIP_Stack",-L"C30\v3.31\bin",-Tp24HJ128GP204.gld
      #- --script="C:/Program Files (x86)/Microchip/mplabc30/v3.31c/support/PIC24F/gld/p24FJ64GB002.gld"
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

:plugins:
  :load_paths:
    - vendor/ceedling/plugins
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
...

















# ---

# # Notes:
# # Sample project C code is not presently written to produce a release artifact.
# # As such, release build options are disabled.
# # This sample, therefore, only demonstrates running a collection of unit tests.

# :project:
#   :use_exceptions: FALSE
#   :use_test_preprocessor: TRUE
#   :use_auxiliary_dependencies: TRUE
#   :build_root: build
#   :release_build: TRUE
#   :test_file_prefix: test_

# :release_build:
#   :output: MyApp.out
# #  :use_assembly: FALSE

# :environment:
#   - :path:
#     - "C:/MinGW/bin"
#     #- "C:/Program Files (x86)/Microchip/mplabc30/v3.31c/bin"
#    # - "C:/Program Files (x86)/Microchip/mplabc30/v3.31c/bin/bin"
# :extension:
#   :executable: .out

# :paths:
#   :test:
#     - +:test/**
#     - -:test/support
#   :source:
#     - src/**
#   :include:
#     - "C:/MinGW/include/**"
#     - "C:/MinGW/include"
#     - include/**
#     - "vendor/ceedling/vendor/unity/src"
#     - C30/v3.31/support/**
#   :support:
#     - test/support

# :defines:
#   # in order to add common defines:
#   #  1) remove the trailing [] from the :common: section
#   #  2) add entries to the :common: section (e.g. :test: has TEST defined)
#   :commmon: &common_defines
#     - DeleteThisDefine
#   :test:
#     - *common_defines  
#     - TEST  
#     - UNITY_INT_WIDTH=16  
#     - UNITY_POINTER_WIDTH=16
#     #- CMOCK_MEM_SIZE=1000
#     - CMOCK_MEM_PTR_AS_INT="unsigned int"
#     - CMOCK_MEM_INDEX_TYPE="unsigned int"
#     - CMOCK_MEM_ALIGN=1
#     - GCC_TEST_UNITY
#     #- __C30__
#     #\\- __PIC24HJ128GP204__
#    # - __PIC24H__


#   :test_preprocess:
#     - *common_defines
#     - TEST

# :cmock:
#   :callback_after_arg_check: TRUE
#   :mock_prefix: mock_
#   :when_no_prototypes: :warn
#   :enforce_strict_ordering: TRUE
#   :plugins:
#     - :ignore
#   :treat_as:
#     uint8:    HEX8
#     uint16:   HEX16
#     uint32:   UINT32
#     int8:     INT8
#     bool:     UINT8

# :tools: 
#   # :release_compiler:
#   #   :executable: pic30-gcc.exe
#   #   :arguments:
#   #     - ${1}
#   #     - -I"C:/Program Files (x86)/Microchip/mplabc30/v3.31c/include"
#   #     - -I"src"
#   #     - -I"include"
#   #     - -D"__PIC24__"
#   #     - -c
# # Ceedling defaults to using gcc for compiling, linking, etc.
# # As [:tools] is blank, gcc will be used (so long as it's in your system path)
# # See documentation to configure a given toolchain for use

# :plugins:
#   :load_paths:
#     - vendor/ceedling/plugins
#   :enabled:
#     - stdout_pretty_tests_report
#     - module_generator
# ...
